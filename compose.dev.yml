version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: listings_postgres_dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: ${TZ}
    ports:
      - "${DATABASE_PORT}:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    networks:
      - listings_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: listings_redis_dev
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - listings_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Go Listings Ingestion Service
  listings-ingestion:
    build: 
      context: ./listings-service
      dockerfile: Dockerfile
    container_name: listings_ingestion_dev
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - listings_network
    environment:
      - TZ=${TZ}
      - RUN_ONCE=${RUN_ONCE:-false}
      - LISTINGS_DATABASE_HOST=postgres
      - LISTINGS_DATABASE_PORT=${DATABASE_PORT}
      - LISTINGS_DATABASE_USER=${POSTGRES_USER}
      - LISTINGS_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - LISTINGS_DATABASE_NAME=${DATABASE_NAME}
      - LISTINGS_DATABASE_SSLMODE=disable
      - LISTINGS_MLS_SYSTEMS_TRREB_BASE_URL=${TRREB_BASE_URL}
      - LISTINGS_MLS_SYSTEMS_TRREB_TOKEN=${TRREB_TOKEN}
      - LISTINGS_MLS_SYSTEMS_TRREB_DATABASE_NAME=${TRREB_DATABASE_NAME}
      - LISTINGS_MLS_SYSTEMS_TRREB_INCLUDE_COMMERCIAL=${TRREB_INCLUDE_COMMERCIAL}
      - LISTINGS_MLS_SYSTEMS_TRREB_ACTIVE=${TRREB_ACTIVE}
      - LISTINGS_DDF_TOKEN_URL=${DDF_TOKEN_URL}
      - LISTINGS_DDF_CLIENT_ID=${DDF_CLIENT_ID}
      - LISTINGS_DDF_CLIENT_SECRET=${DDF_CLIENT_SECRET}
      - LISTINGS_DDF_API_URL=${DDF_API_URL}
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # FastAPI Listings API Service  
  listings-api:
    build:
      context: ./listings-api
      dockerfile: Dockerfile
    container_name: listings_api_dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${API_PORT}:8000"
    networks:
      - listings_network
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG}
      - DATABASE_HOST=postgres
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USER=${POSTGRES_USER}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - API_V1_STR=${API_V1_STR}
      - PAGE_SIZE_DEFAULT=${PAGE_SIZE_DEFAULT}
      - PAGE_SIZE_MAX=${PAGE_SIZE_MAX}
      - CACHE_TTL_SECONDS=${CACHE_TTL_SECONDS}
      - SEARCH_CACHE_TTL=${SEARCH_CACHE_TTL}
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Administration
  adminer:
    image: adminer
    container_name: listings_adminer_dev
    ports:
      - "${ADMINER_PORT}:8080"
    networks:
      - listings_network
    depends_on:
      - postgres
    restart: unless-stopped

  # Nginx Reverse Proxy (Development)
  nginx:
    image: nginx:alpine
    container_name: listings_nginx_dev
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro
    networks:
      - listings_network
    depends_on:
      - listings-api
    restart: unless-stopped

volumes:
  postgres_dev_data:
  redis_dev_data:

networks:
  listings_network:
    driver: bridge